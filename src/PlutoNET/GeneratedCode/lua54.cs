// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace PlutoNET
{
    public unsafe partial class lualib
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaopen_base", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaopenBase(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaopen_coroutine", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaopenCoroutine(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaopen_table", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaopenTable(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaopen_io", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaopenIo(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaopen_os", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaopenOs(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaopen_string", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaopenString(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaopen_utf8", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaopenUtf8(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaopen_math", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaopenMath(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaopen_debug", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaopenDebug(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaopen_package", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaopenPackage(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaopen_assert", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaopenAssert(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaopen_vector3", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaopenVector3(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_openlibs", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_openlibs(__IntPtr L);
        }

        public static int LuaopenBase(IntPtr L)
        {
            var ___ret = __Internal.LuaopenBase(L);
            return ___ret;
        }

        public static int LuaopenCoroutine(IntPtr L)
        {
            var ___ret = __Internal.LuaopenCoroutine(L);
            return ___ret;
        }

        public static int LuaopenTable(IntPtr L)
        {
            var ___ret = __Internal.LuaopenTable(L);
            return ___ret;
        }

        public static int LuaopenIo(IntPtr L)
        {
            var ___ret = __Internal.LuaopenIo(L);
            return ___ret;
        }

        public static int LuaopenOs(IntPtr L)
        {
            var ___ret = __Internal.LuaopenOs(L);
            return ___ret;
        }

        public static int LuaopenString(IntPtr L)
        {
            var ___ret = __Internal.LuaopenString(L);
            return ___ret;
        }

        public static int LuaopenUtf8(IntPtr L)
        {
            var ___ret = __Internal.LuaopenUtf8(L);
            return ___ret;
        }

        public static int LuaopenMath(IntPtr L)
        {
            var ___ret = __Internal.LuaopenMath(L);
            return ___ret;
        }

        public static int LuaopenDebug(IntPtr L)
        {
            var ___ret = __Internal.LuaopenDebug(L);
            return ___ret;
        }

        public static int LuaopenPackage(IntPtr L)
        {
            var ___ret = __Internal.LuaopenPackage(L);
            return ___ret;
        }

        public static int LuaopenAssert(IntPtr L)
        {
            var ___ret = __Internal.LuaopenAssert(L);
            return ___ret;
        }

        public static int LuaopenVector3(IntPtr L)
        {
            var ___ret = __Internal.LuaopenVector3(L);
            return ___ret;
        }

        public static void LuaL_openlibs(IntPtr L)
        {
            __Internal.LuaL_openlibs(L);
        }
    }

    namespace Pluto
    {
        public unsafe partial class lualib
        {
            public partial struct __Internal
            {
            }

            public static global::PlutoNET.Pluto.PreloadedLibrary PreloadedAssert
            {
                get
                {
                    var __ptr = (global::PlutoNET.Pluto.PreloadedLibrary.__Internal*)global::PlutoNET.__Symbols.lua54._preloaded_assert_Pluto__3UPreloadedLibrary_1_B;
                    return global::PlutoNET.Pluto.PreloadedLibrary.__CreateInstance(new __IntPtr(__ptr));
                }
            }

            public static global::PlutoNET.Pluto.PreloadedLibrary PreloadedVector3
            {
                get
                {
                    var __ptr = (global::PlutoNET.Pluto.PreloadedLibrary.__Internal*)global::PlutoNET.__Symbols.lua54._preloaded_vector3_Pluto__3UPreloadedLibrary_1_B;
                    return global::PlutoNET.Pluto.PreloadedLibrary.__CreateInstance(new __IntPtr(__ptr));
                }
            }

            
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int LuaCFunction(__IntPtr L);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int LuaKFunction(__IntPtr L, int status, long ctx);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr LuaReader(__IntPtr L, __IntPtr ud, ulong* sz);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int LuaWriter(__IntPtr L, __IntPtr p, ulong sz, __IntPtr ud);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr LuaAlloc(__IntPtr ud, __IntPtr ptr, ulong osize, ulong nsize);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void LuaWarnFunction(__IntPtr ud, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string msg, int tocont);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void LuaHook(__IntPtr L, __IntPtr ar);

    public unsafe partial class LuaState
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::PlutoNET.LuaState>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::PlutoNET.LuaState>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::PlutoNET.LuaState managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::PlutoNET.LuaState>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::PlutoNET.LuaState managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static LuaState __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new LuaState(native.ToPointer(), skipVTables);
        }

        internal static LuaState __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (LuaState)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static LuaState __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new LuaState(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LuaState(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected LuaState(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class LuaDebug : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 136)]
        public partial struct __Internal
        {
            internal int @event;
            internal __IntPtr name;
            internal __IntPtr namewhat;
            internal __IntPtr what;
            internal __IntPtr source;
            internal ulong srclen;
            internal int currentline;
            internal int linedefined;
            internal int lastlinedefined;
            internal byte nups;
            internal byte nparams;
            internal sbyte isvararg;
            internal sbyte istailcall;
            internal ushort ftransfer;
            internal ushort ntransfer;
            internal fixed sbyte short_src[60];
            internal __IntPtr i_ci;

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "??0lua_Debug@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::PlutoNET.LuaDebug>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::PlutoNET.LuaDebug>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::PlutoNET.LuaDebug managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::PlutoNET.LuaDebug>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::PlutoNET.LuaDebug managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private bool __name_OwnsNativeMemory = false;
        private bool __namewhat_OwnsNativeMemory = false;
        private bool __what_OwnsNativeMemory = false;
        private bool __source_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static LuaDebug __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new LuaDebug(native.ToPointer(), skipVTables);
        }

        internal static LuaDebug __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (LuaDebug)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static LuaDebug __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new LuaDebug(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LuaDebug(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected LuaDebug(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public LuaDebug()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PlutoNET.LuaDebug.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public LuaDebug(global::PlutoNET.LuaDebug _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PlutoNET.LuaDebug.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::PlutoNET.LuaDebug.__Internal*) __Instance) = *((global::PlutoNET.LuaDebug.__Internal*) _0.__Instance);
            if (_0.__name_OwnsNativeMemory)
                this.Name = _0.Name;
            if (_0.__namewhat_OwnsNativeMemory)
                this.Namewhat = _0.Namewhat;
            if (_0.__what_OwnsNativeMemory)
                this.What = _0.What;
            if (_0.__source_OwnsNativeMemory)
                this.Source = _0.Source;
        }

        ~LuaDebug()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__name_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->name);
            if (__namewhat_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->namewhat);
            if (__what_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->what);
            if (__source_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->source);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Event
        {
            get
            {
                return ((__Internal*)__Instance)->@event;
            }

            set
            {
                ((__Internal*)__Instance)->@event = value;
            }
        }

        public string Name
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->name);
            }

            set
            {
                if (__name_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->name);
                __name_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->name = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->name = (__IntPtr) __bytePtr0;
            }
        }

        public string Namewhat
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->namewhat);
            }

            set
            {
                if (__namewhat_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->namewhat);
                __namewhat_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->namewhat = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->namewhat = (__IntPtr) __bytePtr0;
            }
        }

        public string What
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->what);
            }

            set
            {
                if (__what_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->what);
                __what_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->what = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->what = (__IntPtr) __bytePtr0;
            }
        }

        public string Source
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->source);
            }

            set
            {
                if (__source_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->source);
                __source_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->source = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->source = (__IntPtr) __bytePtr0;
            }
        }

        public ulong Srclen
        {
            get
            {
                return ((__Internal*)__Instance)->srclen;
            }

            set
            {
                ((__Internal*)__Instance)->srclen = value;
            }
        }

        public int Currentline
        {
            get
            {
                return ((__Internal*)__Instance)->currentline;
            }

            set
            {
                ((__Internal*)__Instance)->currentline = value;
            }
        }

        public int Linedefined
        {
            get
            {
                return ((__Internal*)__Instance)->linedefined;
            }

            set
            {
                ((__Internal*)__Instance)->linedefined = value;
            }
        }

        public int Lastlinedefined
        {
            get
            {
                return ((__Internal*)__Instance)->lastlinedefined;
            }

            set
            {
                ((__Internal*)__Instance)->lastlinedefined = value;
            }
        }

        public byte Nups
        {
            get
            {
                return ((__Internal*)__Instance)->nups;
            }

            set
            {
                ((__Internal*)__Instance)->nups = value;
            }
        }

        public byte Nparams
        {
            get
            {
                return ((__Internal*)__Instance)->nparams;
            }

            set
            {
                ((__Internal*)__Instance)->nparams = value;
            }
        }

        public sbyte Isvararg
        {
            get
            {
                return ((__Internal*)__Instance)->isvararg;
            }

            set
            {
                ((__Internal*)__Instance)->isvararg = value;
            }
        }

        public sbyte Istailcall
        {
            get
            {
                return ((__Internal*)__Instance)->istailcall;
            }

            set
            {
                ((__Internal*)__Instance)->istailcall = value;
            }
        }

        public ushort Ftransfer
        {
            get
            {
                return ((__Internal*)__Instance)->ftransfer;
            }

            set
            {
                ((__Internal*)__Instance)->ftransfer = value;
            }
        }

        public ushort Ntransfer
        {
            get
            {
                return ((__Internal*)__Instance)->ntransfer;
            }

            set
            {
                ((__Internal*)__Instance)->ntransfer = value;
            }
        }

        public sbyte[] ShortSrc
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->short_src, 60);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 60; i++)
                        ((__Internal*)__Instance)->short_src[i] = value[i];
                }
            }
        }

        public global::PlutoNET.CallInfo ICi
        {
            get
            {
                var __result0 = global::PlutoNET.CallInfo.__GetOrCreateInstance(((__Internal*)__Instance)->i_ci, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->i_ci = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class CallInfo
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::PlutoNET.CallInfo>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::PlutoNET.CallInfo>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::PlutoNET.CallInfo managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::PlutoNET.CallInfo>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::PlutoNET.CallInfo managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static CallInfo __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CallInfo(native.ToPointer(), skipVTables);
        }

        internal static CallInfo __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CallInfo)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CallInfo __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CallInfo(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CallInfo(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CallInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class lua
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_newstate", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaNewstate(__IntPtr f, __IntPtr ud);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_close", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaClose(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_newthread", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaNewthread(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_closethread", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaClosethread(__IntPtr L, __IntPtr from);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_resetthread", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaResetthread(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_atpanic", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaAtpanic(__IntPtr L, __IntPtr panicf);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_version", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double LuaVersion(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_absindex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaAbsindex(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_gettop", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaGettop(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_settop", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaSettop(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_pushvalue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaPushvalue(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_rotate", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaRotate(__IntPtr L, int idx, int n);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_copy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaCopy(__IntPtr L, int fromidx, int toidx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_checkstack", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaCheckstack(__IntPtr L, int n);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_xmove", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaXmove(__IntPtr from, __IntPtr to, int n);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_isnumber", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaIsnumber(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_isstring", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaIsstring(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_iscfunction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaIscfunction(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_isinteger", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaIsinteger(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_istrue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaIstrue(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_isuserdata", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaIsuserdata(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_type", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaType(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_typename", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaTypename(__IntPtr L, int tp);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_tonumberx", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double LuaTonumberx(__IntPtr L, int idx, int* isnum);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_tointegerx", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long LuaTointegerx(__IntPtr L, int idx, int* isnum);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_toboolean", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaToboolean(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_tolstring", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaTolstring(__IntPtr L, int idx, ulong* len);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_rawlen", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong LuaRawlen(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_tocfunction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaTocfunction(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_touserdata", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaTouserdata(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_tothread", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaTothread(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_topointer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaTopointer(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_arith", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaArith(__IntPtr L, int op);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_rawequal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaRawequal(__IntPtr L, int idx1, int idx2);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_compare", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaCompare(__IntPtr L, int idx1, int idx2, int op);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_pushnil", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaPushnil(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_pushnumber", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaPushnumber(__IntPtr L, double n);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_pushinteger", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaPushinteger(__IntPtr L, long n);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_pushlstring", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaPushlstring(__IntPtr L, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string s, ulong len);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_pushstring", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaPushstring(__IntPtr L, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string s);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "?pluto_pushstring@@YAPEBDPEAUlua_State@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr PlutoPushstring(__IntPtr L, __IntPtr str);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_pushfstring", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaPushfstring(__IntPtr L, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_pushcclosure", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaPushcclosure(__IntPtr L, __IntPtr fn, int n);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_pushboolean", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaPushboolean(__IntPtr L, int b);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_pushlightuserdata", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaPushlightuserdata(__IntPtr L, __IntPtr p);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_pushthread", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaPushthread(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_getglobal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaGetglobal(__IntPtr L, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_gettable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaGettable(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_getfield", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaGetfield(__IntPtr L, int idx, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string k);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_geti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaGeti(__IntPtr L, int idx, long n);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_rawget", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaRawget(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_rawgeti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaRawgeti(__IntPtr L, int idx, long n);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_rawgetp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaRawgetp(__IntPtr L, int idx, __IntPtr p);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_createtable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaCreatetable(__IntPtr L, int narr, int nrec);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_newuserdatauv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaNewuserdatauv(__IntPtr L, ulong sz, int nuvalue);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_getmetatable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaGetmetatable(__IntPtr L, int objindex);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_getiuservalue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaGetiuservalue(__IntPtr L, int idx, int n);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_setglobal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaSetglobal(__IntPtr L, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_settable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaSettable(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_setfield", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaSetfield(__IntPtr L, int idx, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string k);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_seti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaSeti(__IntPtr L, int idx, long n);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_rawset", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaRawset(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_rawseti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaRawseti(__IntPtr L, int idx, long n);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_rawsetp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaRawsetp(__IntPtr L, int idx, __IntPtr p);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_setmetatable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaSetmetatable(__IntPtr L, int objindex);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_setiuservalue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaSetiuservalue(__IntPtr L, int idx, int n);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_setcachelen", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaSetcachelen(__IntPtr L, ulong len, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_freezetable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaFreezetable(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_istablefrozen", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaIstablefrozen(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_erriffrozen", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaErriffrozen(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_callk", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaCallk(__IntPtr L, int nargs, int nresults, long ctx, __IntPtr k);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_pcallk", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaPcallk(__IntPtr L, int nargs, int nresults, int errfunc, long ctx, __IntPtr k);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_load", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaLoad(__IntPtr L, __IntPtr reader, __IntPtr dt, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string chunkname, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string mode);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_dump", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaDump(__IntPtr L, __IntPtr writer, __IntPtr data, int strip);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_yieldk", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaYieldk(__IntPtr L, int nresults, long ctx, __IntPtr k);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_resume", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaResume(__IntPtr L, __IntPtr from, int narg, int* nres);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_status", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaStatus(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_isyieldable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaIsyieldable(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_setwarnf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaSetwarnf(__IntPtr L, __IntPtr f, __IntPtr ud);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_warning", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaWarning(__IntPtr L, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string msg, int tocont);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "?pluto_warning@@YAXPEAUlua_State@@PEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PlutoWarning(__IntPtr L, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string msg);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_gc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaGc(__IntPtr L, int what);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_error", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaError(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_next", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaNext(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_concat", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaConcat(__IntPtr L, int n);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_len", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaLen(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_stringtonumber", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong LuaStringtonumber(__IntPtr L, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string s);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_getallocf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaGetallocf(__IntPtr L, __IntPtr* ud);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_setallocf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaSetallocf(__IntPtr L, __IntPtr f, __IntPtr ud);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_toclose", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaToclose(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_closeslot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaCloseslot(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_insert", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaInsert(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_remove", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaRemove(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_replace", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaReplace(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_getstack", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaGetstack(__IntPtr L, int level, __IntPtr ar);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_getinfo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaGetinfo(__IntPtr L, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string what, __IntPtr ar);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_getlocal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaGetlocal(__IntPtr L, __IntPtr ar, int n);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_setlocal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaSetlocal(__IntPtr L, __IntPtr ar, int n);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_getupvalue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaGetupvalue(__IntPtr L, int funcindex, int n);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_setupvalue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaSetupvalue(__IntPtr L, int funcindex, int n);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_upvalueid", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaUpvalueid(__IntPtr L, int fidx, int n);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_upvaluejoin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaUpvaluejoin(__IntPtr L, int fidx1, int n1, int fidx2, int n2);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_sethook", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaSethook(__IntPtr L, __IntPtr func, int mask, int count);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_gethook", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaGethook(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_gethookmask", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaGethookmask(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_gethookcount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaGethookcount(__IntPtr L);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "lua_setcstacklimit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaSetcstacklimit(__IntPtr L, uint limit);
        }

        public static IntPtr LuaNewstate(global::PlutoNET.LuaAlloc f, __IntPtr ud)
        {
            var __arg0 = f == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(f);
            var ___ret = __Internal.LuaNewstate(__arg0, ud);
            return ___ret;
        }

        public static void LuaClose(IntPtr L)
        {
            __Internal.LuaClose(L);
        }

        public static IntPtr LuaNewthread(IntPtr L)
        {
            var ___ret = __Internal.LuaNewthread(L);
            return ___ret;
        }

        public static int LuaClosethread(IntPtr L, IntPtr from)
        {
            var ___ret = __Internal.LuaClosethread(L, from);
            return ___ret;
        }

        public static int LuaResetthread(IntPtr L)
        {
            var ___ret = __Internal.LuaResetthread(L);
            return ___ret;
        }

        public static global::PlutoNET.LuaCFunction LuaAtpanic(IntPtr L, global::PlutoNET.LuaCFunction panicf)
        {
            var __arg1 = panicf == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(panicf);
            var ___ret = __Internal.LuaAtpanic(L, __arg1);
            var __ptr0 = ___ret;
            return __ptr0 == IntPtr.Zero? null : (global::PlutoNET.LuaCFunction) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PlutoNET.LuaCFunction));
        }

        public static double LuaVersion(IntPtr L)
        {
            var ___ret = __Internal.LuaVersion(L);
            return ___ret;
        }

        public static int LuaAbsindex(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaAbsindex(L, idx);
            return ___ret;
        }

        public static int LuaGettop(IntPtr L)
        {
            var ___ret = __Internal.LuaGettop(L);
            return ___ret;
        }

        public static void LuaSettop(IntPtr L, int idx)
        {
            __Internal.LuaSettop(L, idx);
        }

        public static void LuaPushvalue(IntPtr L, int idx)
        {
            __Internal.LuaPushvalue(L, idx);
        }

        public static void LuaRotate(IntPtr L, int idx, int n)
        {
            __Internal.LuaRotate(L, idx, n);
        }

        public static void LuaCopy(IntPtr L, int fromidx, int toidx)
        {
            __Internal.LuaCopy(L, fromidx, toidx);
        }

        public static int LuaCheckstack(IntPtr L, int n)
        {
            var ___ret = __Internal.LuaCheckstack(L, n);
            return ___ret;
        }

        public static void LuaXmove(IntPtr from, IntPtr to, int n)
        {
            __Internal.LuaXmove(from, to, n);
        }

        public static int LuaIsnumber(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaIsnumber(L, idx);
            return ___ret;
        }

        public static int LuaIsstring(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaIsstring(L, idx);
            return ___ret;
        }

        public static int LuaIscfunction(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaIscfunction(L, idx);
            return ___ret;
        }

        public static int LuaIsinteger(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaIsinteger(L, idx);
            return ___ret;
        }

        public static int LuaIstrue(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaIstrue(L, idx);
            return ___ret;
        }

        public static int LuaIsuserdata(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaIsuserdata(L, idx);
            return ___ret;
        }

        public static int LuaType(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaType(L, idx);
            return ___ret;
        }

        public static string LuaTypename(IntPtr L, int tp)
        {
            var ___ret = __Internal.LuaTypename(L, tp);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        public static double LuaTonumberx(IntPtr L, int idx, ref int isnum)
        {
            fixed (int* __isnum2 = &isnum)
            {
                var __arg2 = __isnum2;
                var ___ret = __Internal.LuaTonumberx(L, idx, __arg2);
                return ___ret;
            }
        }

        public static long LuaTointegerx(IntPtr L, int idx, ref int isnum)
        {
            fixed (int* __isnum2 = &isnum)
            {
                var __arg2 = __isnum2;
                var ___ret = __Internal.LuaTointegerx(L, idx, __arg2);
                return ___ret;
            }
        }

        public static int LuaToboolean(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaToboolean(L, idx);
            return ___ret;
        }

        public static string LuaTolstring(IntPtr L, int idx, ref ulong len)
        {
            fixed (ulong* __len2 = &len)
            {
                var __arg2 = __len2;
                var ___ret = __Internal.LuaTolstring(L, idx, __arg2);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }
        }

        public static ulong LuaRawlen(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaRawlen(L, idx);
            return ___ret;
        }

        public static global::PlutoNET.LuaCFunction LuaTocfunction(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaTocfunction(L, idx);
            var __ptr0 = ___ret;
            return __ptr0 == IntPtr.Zero? null : (global::PlutoNET.LuaCFunction) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PlutoNET.LuaCFunction));
        }

        public static __IntPtr LuaTouserdata(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaTouserdata(L, idx);
            return ___ret;
        }

        public static IntPtr LuaTothread(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaTothread(L, idx);
            return ___ret;
        }

        public static __IntPtr LuaTopointer(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaTopointer(L, idx);
            return ___ret;
        }

        public static void LuaArith(IntPtr L, int op)
        {
            __Internal.LuaArith(L, op);
        }

        public static int LuaRawequal(IntPtr L, int idx1, int idx2)
        {
            var ___ret = __Internal.LuaRawequal(L, idx1, idx2);
            return ___ret;
        }

        public static int LuaCompare(IntPtr L, int idx1, int idx2, int op)
        {
            var ___ret = __Internal.LuaCompare(L, idx1, idx2, op);
            return ___ret;
        }

        public static void LuaPushnil(IntPtr L)
        {
            __Internal.LuaPushnil(L);
        }

        public static void LuaPushnumber(IntPtr L, double n)
        {
            __Internal.LuaPushnumber(L, n);
        }

        public static void LuaPushinteger(IntPtr L, long n)
        {
            __Internal.LuaPushinteger(L, n);
        }

        public static string LuaPushlstring(IntPtr L, string s, ulong len)
        {
            var ___ret = __Internal.LuaPushlstring(L, s, len);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        public static string LuaPushstring(IntPtr L, string s)
        {
            var ___ret = __Internal.LuaPushstring(L, s);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        public static string PlutoPushstring(IntPtr L, string str)
        {
            var __basicString1 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
            global::Std.BasicStringExtensions.Assign(__basicString1, str);
            var __arg1 = __basicString1.__Instance;
            var ___ret = __Internal.PlutoPushstring(L, __arg1);
            __basicString1.Dispose();
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        public static string LuaPushfstring(IntPtr L, string fmt)
        {
            var ___ret = __Internal.LuaPushfstring(L, fmt);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        public static void LuaPushcclosure(IntPtr L, global::PlutoNET.LuaCFunction fn, int n)
        {
            var __arg1 = fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fn);
            __Internal.LuaPushcclosure(L, __arg1, n);
        }

        public static void LuaPushboolean(IntPtr L, int b)
        {
            __Internal.LuaPushboolean(L, b);
        }

        public static void LuaPushlightuserdata(IntPtr L, __IntPtr p)
        {
            __Internal.LuaPushlightuserdata(L, p);
        }

        public static int LuaPushthread(IntPtr L)
        {
            var ___ret = __Internal.LuaPushthread(L);
            return ___ret;
        }

        public static int LuaGetglobal(IntPtr L, string name)
        {
            var ___ret = __Internal.LuaGetglobal(L, name);
            return ___ret;
        }

        public static int LuaGettable(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaGettable(L, idx);
            return ___ret;
        }

        public static int LuaGetfield(IntPtr L, int idx, string k)
        {
            var ___ret = __Internal.LuaGetfield(L, idx, k);
            return ___ret;
        }

        public static int LuaGeti(IntPtr L, int idx, long n)
        {
            var ___ret = __Internal.LuaGeti(L, idx, n);
            return ___ret;
        }

        public static int LuaRawget(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaRawget(L, idx);
            return ___ret;
        }

        public static int LuaRawgeti(IntPtr L, int idx, long n)
        {
            var ___ret = __Internal.LuaRawgeti(L, idx, n);
            return ___ret;
        }

        public static int LuaRawgetp(IntPtr L, int idx, __IntPtr p)
        {
            var ___ret = __Internal.LuaRawgetp(L, idx, p);
            return ___ret;
        }

        public static void LuaCreatetable(IntPtr L, int narr, int nrec)
        {
            __Internal.LuaCreatetable(L, narr, nrec);
        }

        public static __IntPtr LuaNewuserdatauv(IntPtr L, ulong sz, int nuvalue)
        {
            var ___ret = __Internal.LuaNewuserdatauv(L, sz, nuvalue);
            return ___ret;
        }

        public static int LuaGetmetatable(IntPtr L, int objindex)
        {
            var ___ret = __Internal.LuaGetmetatable(L, objindex);
            return ___ret;
        }

        public static int LuaGetiuservalue(IntPtr L, int idx, int n)
        {
            var ___ret = __Internal.LuaGetiuservalue(L, idx, n);
            return ___ret;
        }

        public static void LuaSetglobal(IntPtr L, string name)
        {
            __Internal.LuaSetglobal(L, name);
        }

        public static void LuaSettable(IntPtr L, int idx)
        {
            __Internal.LuaSettable(L, idx);
        }

        public static void LuaSetfield(IntPtr L, int idx, string k)
        {
            __Internal.LuaSetfield(L, idx, k);
        }

        public static void LuaSeti(IntPtr L, int idx, long n)
        {
            __Internal.LuaSeti(L, idx, n);
        }

        public static void LuaRawset(IntPtr L, int idx)
        {
            __Internal.LuaRawset(L, idx);
        }

        public static void LuaRawseti(IntPtr L, int idx, long n)
        {
            __Internal.LuaRawseti(L, idx, n);
        }

        public static void LuaRawsetp(IntPtr L, int idx, __IntPtr p)
        {
            __Internal.LuaRawsetp(L, idx, p);
        }

        public static int LuaSetmetatable(IntPtr L, int objindex)
        {
            var ___ret = __Internal.LuaSetmetatable(L, objindex);
            return ___ret;
        }

        public static int LuaSetiuservalue(IntPtr L, int idx, int n)
        {
            var ___ret = __Internal.LuaSetiuservalue(L, idx, n);
            return ___ret;
        }

        public static void LuaSetcachelen(IntPtr L, ulong len, int idx)
        {
            __Internal.LuaSetcachelen(L, len, idx);
        }

        public static void LuaFreezetable(IntPtr L, int idx)
        {
            __Internal.LuaFreezetable(L, idx);
        }

        public static int LuaIstablefrozen(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaIstablefrozen(L, idx);
            return ___ret;
        }

        public static void LuaErriffrozen(IntPtr L, int idx)
        {
            __Internal.LuaErriffrozen(L, idx);
        }

        public static void LuaCallk(IntPtr L, int nargs, int nresults, long ctx, global::PlutoNET.LuaKFunction k)
        {
            var __arg4 = k == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(k);
            __Internal.LuaCallk(L, nargs, nresults, ctx, __arg4);
        }

        public static int LuaPcallk(IntPtr L, int nargs, int nresults, int errfunc, long ctx, global::PlutoNET.LuaKFunction k)
        {
            var __arg5 = k == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(k);
            var ___ret = __Internal.LuaPcallk(L, nargs, nresults, errfunc, ctx, __arg5);
            return ___ret;
        }

        public static int LuaLoad(IntPtr L, global::PlutoNET.LuaReader reader, __IntPtr dt, string chunkname, string mode)
        {
            var __arg1 = reader == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(reader);
            var ___ret = __Internal.LuaLoad(L, __arg1, dt, chunkname, mode);
            return ___ret;
        }

        public static int LuaDump(IntPtr L, global::PlutoNET.LuaWriter writer, __IntPtr data, int strip)
        {
            var __arg1 = writer == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(writer);
            var ___ret = __Internal.LuaDump(L, __arg1, data, strip);
            return ___ret;
        }

        public static int LuaYieldk(IntPtr L, int nresults, long ctx, global::PlutoNET.LuaKFunction k)
        {
            var __arg3 = k == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(k);
            var ___ret = __Internal.LuaYieldk(L, nresults, ctx, __arg3);
            return ___ret;
        }

        public static int LuaResume(IntPtr L, IntPtr from, int narg, ref int nres)
        {
            fixed (int* __nres3 = &nres)
            {
                var __arg3 = __nres3;
                var ___ret = __Internal.LuaResume(L, from, narg, __arg3);
                return ___ret;
            }
        }

        public static int LuaStatus(IntPtr L)
        {
            var ___ret = __Internal.LuaStatus(L);
            return ___ret;
        }

        public static int LuaIsyieldable(IntPtr L)
        {
            var ___ret = __Internal.LuaIsyieldable(L);
            return ___ret;
        }

        public static void LuaSetwarnf(IntPtr L, global::PlutoNET.LuaWarnFunction f, __IntPtr ud)
        {
            var __arg1 = f == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(f);
            __Internal.LuaSetwarnf(L, __arg1, ud);
        }

        public static void LuaWarning(IntPtr L, string msg, int tocont)
        {
            __Internal.LuaWarning(L, msg, tocont);
        }

        public static void PlutoWarning(IntPtr L, string msg)
        {
            __Internal.PlutoWarning(L, msg);
        }

        public static int LuaGc(IntPtr L, int what)
        {
            var ___ret = __Internal.LuaGc(L, what);
            return ___ret;
        }

        public static int LuaError(IntPtr L)
        {
            var ___ret = __Internal.LuaError(L);
            return ___ret;
        }

        public static int LuaNext(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaNext(L, idx);
            return ___ret;
        }

        public static void LuaConcat(IntPtr L, int n)
        {
            __Internal.LuaConcat(L, n);
        }

        public static void LuaLen(IntPtr L, int idx)
        {
            __Internal.LuaLen(L, idx);
        }

        public static ulong LuaStringtonumber(IntPtr L, string s)
        {
            var ___ret = __Internal.LuaStringtonumber(L, s);
            return ___ret;
        }

        public static global::PlutoNET.LuaAlloc LuaGetallocf(IntPtr L, __IntPtr* ud)
        {
            var ___ret = __Internal.LuaGetallocf(L, ud);
            var __ptr0 = ___ret;
            return __ptr0 == IntPtr.Zero? null : (global::PlutoNET.LuaAlloc) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PlutoNET.LuaAlloc));
        }

        public static void LuaSetallocf(IntPtr L, global::PlutoNET.LuaAlloc f, __IntPtr ud)
        {
            var __arg1 = f == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(f);
            __Internal.LuaSetallocf(L, __arg1, ud);
        }

        public static void LuaToclose(IntPtr L, int idx)
        {
            __Internal.LuaToclose(L, idx);
        }

        public static void LuaCloseslot(IntPtr L, int idx)
        {
            __Internal.LuaCloseslot(L, idx);
        }

        public static void LuaInsert(IntPtr L, int idx)
        {
            __Internal.LuaInsert(L, idx);
        }

        public static void LuaRemove(IntPtr L, int idx)
        {
            __Internal.LuaRemove(L, idx);
        }

        public static void LuaReplace(IntPtr L, int idx)
        {
            __Internal.LuaReplace(L, idx);
        }

        public static int LuaGetstack(IntPtr L, int level, global::PlutoNET.LuaDebug ar)
        {
            var __arg2 = ar is null ? __IntPtr.Zero : ar.__Instance;
            var ___ret = __Internal.LuaGetstack(L, level, __arg2);
            return ___ret;
        }

        public static int LuaGetinfo(IntPtr L, string what, global::PlutoNET.LuaDebug ar)
        {
            var __arg2 = ar is null ? __IntPtr.Zero : ar.__Instance;
            var ___ret = __Internal.LuaGetinfo(L, what, __arg2);
            return ___ret;
        }

        public static string LuaGetlocal(IntPtr L, global::PlutoNET.LuaDebug ar, int n)
        {
            var __arg1 = ar is null ? __IntPtr.Zero : ar.__Instance;
            var ___ret = __Internal.LuaGetlocal(L, __arg1, n);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        public static string LuaSetlocal(IntPtr L, global::PlutoNET.LuaDebug ar, int n)
        {
            var __arg1 = ar is null ? __IntPtr.Zero : ar.__Instance;
            var ___ret = __Internal.LuaSetlocal(L, __arg1, n);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        public static string LuaGetupvalue(IntPtr L, int funcindex, int n)
        {
            var ___ret = __Internal.LuaGetupvalue(L, funcindex, n);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        public static string LuaSetupvalue(IntPtr L, int funcindex, int n)
        {
            var ___ret = __Internal.LuaSetupvalue(L, funcindex, n);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        public static __IntPtr LuaUpvalueid(IntPtr L, int fidx, int n)
        {
            var ___ret = __Internal.LuaUpvalueid(L, fidx, n);
            return ___ret;
        }

        public static void LuaUpvaluejoin(IntPtr L, int fidx1, int n1, int fidx2, int n2)
        {
            __Internal.LuaUpvaluejoin(L, fidx1, n1, fidx2, n2);
        }

        public static void LuaSethook(IntPtr L, global::PlutoNET.LuaHook func, int mask, int count)
        {
            var __arg1 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
            __Internal.LuaSethook(L, __arg1, mask, count);
        }

        public static global::PlutoNET.LuaHook LuaGethook(IntPtr L)
        {
            var ___ret = __Internal.LuaGethook(L);
            var __ptr0 = ___ret;
            return __ptr0 == IntPtr.Zero? null : (global::PlutoNET.LuaHook) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PlutoNET.LuaHook));
        }

        public static int LuaGethookmask(IntPtr L)
        {
            var ___ret = __Internal.LuaGethookmask(L);
            return ___ret;
        }

        public static int LuaGethookcount(IntPtr L)
        {
            var ___ret = __Internal.LuaGethookcount(L);
            return ___ret;
        }

        public static int LuaSetcstacklimit(IntPtr L, uint limit)
        {
            var ___ret = __Internal.LuaSetcstacklimit(L, limit);
            return ___ret;
        }

        public static string LuaIdent
        {
            get
            {
                var __ptr = global::PlutoNET.__Symbols.lua54._lua_ident__3QBDB;
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ptr);
            }
        }
    }

    public unsafe partial class LuaL_Reg : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr name;
            internal __IntPtr func;

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "??0luaL_Reg@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::PlutoNET.LuaL_Reg>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::PlutoNET.LuaL_Reg>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::PlutoNET.LuaL_Reg managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::PlutoNET.LuaL_Reg>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::PlutoNET.LuaL_Reg managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private bool __name_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static LuaL_Reg __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new LuaL_Reg(native.ToPointer(), skipVTables);
        }

        internal static LuaL_Reg __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (LuaL_Reg)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static LuaL_Reg __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new LuaL_Reg(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LuaL_Reg(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected LuaL_Reg(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public LuaL_Reg()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PlutoNET.LuaL_Reg.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public LuaL_Reg(global::PlutoNET.LuaL_Reg _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PlutoNET.LuaL_Reg.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::PlutoNET.LuaL_Reg.__Internal*) __Instance) = *((global::PlutoNET.LuaL_Reg.__Internal*) _0.__Instance);
            if (_0.__name_OwnsNativeMemory)
                this.Name = _0.Name;
        }

        ~LuaL_Reg()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__name_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->name);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string Name
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->name);
            }

            set
            {
                if (__name_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->name);
                __name_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->name = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->name = (__IntPtr) __bytePtr0;
            }
        }

        public global::PlutoNET.LuaCFunction Func
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->func;
                return __ptr0 == IntPtr.Zero? null : (global::PlutoNET.LuaCFunction) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PlutoNET.LuaCFunction));
            }

            set
            {
                ((__Internal*)__Instance)->func = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class LuaL_Buffer : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1056)]
        public partial struct __Internal
        {
            internal __IntPtr b;
            internal ulong size;
            internal ulong n;
            internal __IntPtr L;
            internal global::PlutoNET.LuaL_Buffer.Init.__Internal init;

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "??0luaL_Buffer@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public unsafe partial struct Init
        {
            [StructLayout(LayoutKind.Explicit, Size = 1024)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal double n;

                [FieldOffset(0)]
                internal double u;

                [FieldOffset(0)]
                internal __IntPtr s;

                [FieldOffset(0)]
                internal long i;

                [FieldOffset(0)]
                internal int l;

                [FieldOffset(0)]
                internal fixed sbyte b[1024];

                [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "??0<unnamed-type-init>@luaL_Buffer@@QEAA@AEBT01@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
            }

            private Init.__Internal __instance;
            internal ref Init.__Internal __Instance => ref __instance;

            internal static Init __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                return new Init(native.ToPointer(), skipVTables);
            }

            internal static Init __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new Init(native, skipVTables);
            }

            private Init(__Internal native, bool skipVTables = false)
                : this()
            {
                __instance = native;
            }

            private Init(void* native, bool skipVTables = false) : this()
            {
                __instance = *(global::PlutoNET.LuaL_Buffer.Init.__Internal*) native;
            }

            public Init(global::PlutoNET.LuaL_Buffer.Init _0)
                : this()
            {
                var ____arg0 = _0.__Instance;
                var __arg0 = new __IntPtr(&____arg0);
                fixed (__Internal* __instancePtr = &__instance)
                {
                    __Internal.cctor(new __IntPtr(__instancePtr), __arg0);
                }
            }

            public double N
            {
                get
                {
                    return __instance.n;
                }

                set
                {
                    __instance.n = value;
                }
            }

            public double U
            {
                get
                {
                    return __instance.u;
                }

                set
                {
                    __instance.u = value;
                }
            }

            public __IntPtr S
            {
                get
                {
                    return __instance.s;
                }

                set
                {
                    __instance.s = (__IntPtr) value;
                }
            }

            public long I
            {
                get
                {
                    return __instance.i;
                }

                set
                {
                    __instance.i = value;
                }
            }

            public int L
            {
                get
                {
                    return __instance.l;
                }

                set
                {
                    __instance.l = value;
                }
            }

            public sbyte[] B
            {
                get
                {
                    fixed (sbyte* __arrPtr = __instance.b)
                    {
                        return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(__arrPtr, 1024);
                    }
                }

                set
                {
                    fixed (sbyte* __arrPtr = __instance.b)
                    {
                        if (value != null)
                        {
                            for (int i = 0; i < 1024; i++)
                                __arrPtr[i] = value[i];
                        }
                    }
                }
            }
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::PlutoNET.LuaL_Buffer>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::PlutoNET.LuaL_Buffer>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::PlutoNET.LuaL_Buffer managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::PlutoNET.LuaL_Buffer>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::PlutoNET.LuaL_Buffer managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static LuaL_Buffer __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new LuaL_Buffer(native.ToPointer(), skipVTables);
        }

        internal static LuaL_Buffer __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (LuaL_Buffer)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static LuaL_Buffer __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new LuaL_Buffer(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LuaL_Buffer(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected LuaL_Buffer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public LuaL_Buffer()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PlutoNET.LuaL_Buffer.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public LuaL_Buffer(global::PlutoNET.LuaL_Buffer _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PlutoNET.LuaL_Buffer.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::PlutoNET.LuaL_Buffer.__Internal*) __Instance) = *((global::PlutoNET.LuaL_Buffer.__Internal*) _0.__Instance);
        }

        ~LuaL_Buffer()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte* B
        {
            get
            {
                return (sbyte*) ((__Internal*)__Instance)->b;
            }

            set
            {
                ((__Internal*)__Instance)->b = (__IntPtr) value;
            }
        }

        public ulong Size
        {
            get
            {
                return ((__Internal*)__Instance)->size;
            }

            set
            {
                ((__Internal*)__Instance)->size = value;
            }
        }

        public ulong N
        {
            get
            {
                return ((__Internal*)__Instance)->n;
            }

            set
            {
                ((__Internal*)__Instance)->n = value;
            }
        }

        public IntPtr L
        {
            get
            {
                return ((__Internal*)__Instance)->L;
            }

            set
            {
                ((__Internal*)__Instance)->L = value;
            }
        }

        public global::PlutoNET.LuaL_Buffer.Init init
        {
            get
            {
                return global::PlutoNET.LuaL_Buffer.Init.__CreateInstance(((__Internal*)__Instance)->init);
            }

            set
            {
                ((__Internal*)__Instance)->init = value.__Instance;
            }
        }
    }

    public unsafe partial class LuaL_Stream : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr f;
            internal __IntPtr closef;

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "??0luaL_Stream@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::PlutoNET.LuaL_Stream>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::PlutoNET.LuaL_Stream>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::PlutoNET.LuaL_Stream managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::PlutoNET.LuaL_Stream>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::PlutoNET.LuaL_Stream managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static LuaL_Stream __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new LuaL_Stream(native.ToPointer(), skipVTables);
        }

        internal static LuaL_Stream __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (LuaL_Stream)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static LuaL_Stream __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new LuaL_Stream(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LuaL_Stream(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected LuaL_Stream(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public LuaL_Stream()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PlutoNET.LuaL_Stream.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public LuaL_Stream(global::PlutoNET.LuaL_Stream _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PlutoNET.LuaL_Stream.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::PlutoNET.LuaL_Stream.__Internal*) __Instance) = *((global::PlutoNET.LuaL_Stream.__Internal*) _0.__Instance);
        }

        ~LuaL_Stream()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::System.IntPtr F
        {
            get
            {
                return ((__Internal*)__Instance)->f;
            }

            set
            {
                ((__Internal*)__Instance)->f = value;
            }
        }

        public global::PlutoNET.LuaCFunction Closef
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->closef;
                return __ptr0 == IntPtr.Zero? null : (global::PlutoNET.LuaCFunction) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PlutoNET.LuaCFunction));
            }

            set
            {
                ((__Internal*)__Instance)->closef = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class lauxlib
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_checkversion_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_checkversion(__IntPtr L, double ver, ulong sz);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_getmetafield", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaL_getmetafield(__IntPtr L, int obj, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string e);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_callmeta", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaL_callmeta(__IntPtr L, int obj, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string e);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_tolstring", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaL_tolstring(__IntPtr L, int idx, ulong* len);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_argerror", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaL_argerror(__IntPtr L, int arg, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string extramsg);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_typeerror", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaL_typeerror(__IntPtr L, int arg, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string tname);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_checklstring", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaL_checklstring(__IntPtr L, int arg, ulong* l);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_optlstring", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaL_optlstring(__IntPtr L, int arg, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string def, ulong* l);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "?pluto_checkstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEAUlua_State@@H@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C PlutoCheckstring(__IntPtr L, int arg);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "?pluto_optstring@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEAUlua_State@@HV12@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C PlutoOptstring(__IntPtr L, int arg, global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C def);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_checknumber", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double LuaL_checknumber(__IntPtr L, int arg);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_optnumber", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double LuaL_optnumber(__IntPtr L, int arg, double def);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_checkinteger", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long LuaL_checkinteger(__IntPtr L, int arg);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_optinteger", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long LuaL_optinteger(__IntPtr L, int arg, long def);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_checkstack", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_checkstack(__IntPtr L, int sz, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string msg);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_checktype", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_checktype(__IntPtr L, int arg, int t);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_checkany", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_checkany(__IntPtr L, int arg);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_newmetatable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaL_newmetatable(__IntPtr L, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string tname);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_setmetatable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_setmetatable(__IntPtr L, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string tname);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_testudata", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaL_testudata(__IntPtr L, int ud, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string tname);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_checkudata", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaL_checkudata(__IntPtr L, int ud, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string tname);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_where", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_where(__IntPtr L, int lvl);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_error", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaL_error(__IntPtr L, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fmt);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_checkoption", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaL_checkoption(__IntPtr L, int arg, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string def, [MarshalAs(UnmanagedType.LPArray)] string[] lst);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_fileresult", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaL_fileresult(__IntPtr L, int stat, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fname);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_execresult", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaL_execresult(__IntPtr L, int stat);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_ref", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaL_ref(__IntPtr L, int t);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_unref", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_unref(__IntPtr L, int t, int @ref);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "?luaL_utf16_to_utf8@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_W_K@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_utf16ToUtf8(__IntPtr @return, [MarshalAs(UnmanagedType.LPWStr)] string utf16, ulong utf16_len);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_fopen", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaL_fopen([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filename, ulong filename_len, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string mode, ulong mode_len);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_loadfilex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaL_loadfilex(__IntPtr L, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filename, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string mode);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_loadbufferx", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaL_loadbufferx(__IntPtr L, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string buff, ulong sz, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string mode);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_loadstring", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaL_loadstring(__IntPtr L, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string s);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_newstate", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaL_newstate();

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_len", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long LuaL_len(__IntPtr L, int idx);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_addgsub", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_addgsub(__IntPtr b, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string s, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string p, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string r);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_gsub", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LuaL_gsub(__IntPtr L, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string s, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string p, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string r);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_setfuncs", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_setfuncs(__IntPtr L, __IntPtr l, int nup);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_getsubtable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LuaL_getsubtable(__IntPtr L, int idx, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string fname);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_traceback", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_traceback(__IntPtr L, __IntPtr L1, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string msg, int level);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_requiref", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_requiref(__IntPtr L, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string modname, __IntPtr openf, int glb);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_buffinit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_buffinit(__IntPtr L, __IntPtr B);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_prepbuffsize", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* LuaL_prepbuffsize(__IntPtr B, ulong sz);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_addlstring", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_addlstring(__IntPtr B, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string s, ulong l);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_addstring", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_addstring(__IntPtr B, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string s);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_addvalue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_addvalue(__IntPtr B);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_pushresult", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_pushresult(__IntPtr B);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_pushresultsize", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LuaL_pushresultsize(__IntPtr B, ulong sz);

            [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "luaL_buffinitsize", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* LuaL_buffinitsize(__IntPtr L, __IntPtr B, ulong sz);
        }

        public static void LuaL_checkversion(IntPtr L, double ver, ulong sz)
        {
            __Internal.LuaL_checkversion(L, ver, sz);
        }

        public static int LuaL_getmetafield(IntPtr L, int obj, string e)
        {
            var ___ret = __Internal.LuaL_getmetafield(L, obj, e);
            return ___ret;
        }

        public static int LuaL_callmeta(IntPtr L, int obj, string e)
        {
            var ___ret = __Internal.LuaL_callmeta(L, obj, e);
            return ___ret;
        }

        public static string LuaL_tolstring(IntPtr L, int idx, ref ulong len)
        {
            fixed (ulong* __len2 = &len)
            {
                var __arg2 = __len2;
                var ___ret = __Internal.LuaL_tolstring(L, idx, __arg2);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }
        }

        public static int LuaL_argerror(IntPtr L, int arg, string extramsg)
        {
            var ___ret = __Internal.LuaL_argerror(L, arg, extramsg);
            return ___ret;
        }

        public static int LuaL_typeerror(IntPtr L, int arg, string tname)
        {
            var ___ret = __Internal.LuaL_typeerror(L, arg, tname);
            return ___ret;
        }

        public static string LuaL_checklstring(IntPtr L, int arg, ref ulong l)
        {
            fixed (ulong* __l2 = &l)
            {
                var __arg2 = __l2;
                var ___ret = __Internal.LuaL_checklstring(L, arg, __arg2);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }
        }

        public static string LuaL_optlstring(IntPtr L, int arg, string def, ref ulong l)
        {
            fixed (ulong* __l3 = &l)
            {
                var __arg3 = __l3;
                var ___ret = __Internal.LuaL_optlstring(L, arg, def, __arg3);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }
        }

        public static string PlutoCheckstring(IntPtr L, int arg)
        {
            var ___ret = __Internal.PlutoCheckstring(L, arg);
            var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
            var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
            __basicStringRet0.Dispose();
            return __retString0;
        }

        public static string PlutoOptstring(IntPtr L, int arg, string def)
        {
            var __basicString2 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
            global::Std.BasicStringExtensions.Assign(__basicString2, def);
            var __arg2 = *(global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C*) __basicString2.__Instance;
            var ___ret = __Internal.PlutoOptstring(L, arg, __arg2);
            __basicString2.Dispose(disposing: true, callNativeDtor:false);
            var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
            var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
            __basicStringRet0.Dispose();
            return __retString0;
        }

        public static double LuaL_checknumber(IntPtr L, int arg)
        {
            var ___ret = __Internal.LuaL_checknumber(L, arg);
            return ___ret;
        }

        public static double LuaL_optnumber(IntPtr L, int arg, double def)
        {
            var ___ret = __Internal.LuaL_optnumber(L, arg, def);
            return ___ret;
        }

        public static long LuaL_checkinteger(IntPtr L, int arg)
        {
            var ___ret = __Internal.LuaL_checkinteger(L, arg);
            return ___ret;
        }

        public static long LuaL_optinteger(IntPtr L, int arg, long def)
        {
            var ___ret = __Internal.LuaL_optinteger(L, arg, def);
            return ___ret;
        }

        public static void LuaL_checkstack(IntPtr L, int sz, string msg)
        {
            __Internal.LuaL_checkstack(L, sz, msg);
        }

        public static void LuaL_checktype(IntPtr L, int arg, int t)
        {
            __Internal.LuaL_checktype(L, arg, t);
        }

        public static void LuaL_checkany(IntPtr L, int arg)
        {
            __Internal.LuaL_checkany(L, arg);
        }

        public static int LuaL_newmetatable(IntPtr L, string tname)
        {
            var ___ret = __Internal.LuaL_newmetatable(L, tname);
            return ___ret;
        }

        public static void LuaL_setmetatable(IntPtr L, string tname)
        {
            __Internal.LuaL_setmetatable(L, tname);
        }

        public static __IntPtr LuaL_testudata(IntPtr L, int ud, string tname)
        {
            var ___ret = __Internal.LuaL_testudata(L, ud, tname);
            return ___ret;
        }

        public static __IntPtr LuaL_checkudata(IntPtr L, int ud, string tname)
        {
            var ___ret = __Internal.LuaL_checkudata(L, ud, tname);
            return ___ret;
        }

        public static void LuaL_where(IntPtr L, int lvl)
        {
            __Internal.LuaL_where(L, lvl);
        }

        public static int LuaL_error(IntPtr L, string fmt)
        {
            var ___ret = __Internal.LuaL_error(L, fmt);
            return ___ret;
        }

        public static int LuaL_checkoption(IntPtr L, int arg, string def, string[] lst)
        {
            var ___ret = __Internal.LuaL_checkoption(L, arg, def, lst);
            return ___ret;
        }

        public static int LuaL_fileresult(IntPtr L, int stat, string fname)
        {
            var ___ret = __Internal.LuaL_fileresult(L, stat, fname);
            return ___ret;
        }

        public static int LuaL_execresult(IntPtr L, int stat)
        {
            var ___ret = __Internal.LuaL_execresult(L, stat);
            return ___ret;
        }

        public static int LuaL_ref(IntPtr L, int t)
        {
            var ___ret = __Internal.LuaL_ref(L, t);
            return ___ret;
        }

        public static void LuaL_unref(IntPtr L, int t, int @ref)
        {
            __Internal.LuaL_unref(L, t, @ref);
        }

        public static string LuaL_utf16ToUtf8(string utf16, ulong utf16_len)
        {
            var ___ret = new global::Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.LuaL_utf16ToUtf8(new IntPtr(&___ret), utf16, utf16_len);
            var __basicStringRet0 = global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
            var __retString0 = global::Std.BasicStringExtensions.Data(__basicStringRet0);
            __basicStringRet0.Dispose();
            return __retString0;
        }

        public static global::System.IntPtr LuaL_fopen(string filename, ulong filename_len, string mode, ulong mode_len)
        {
            var ___ret = __Internal.LuaL_fopen(filename, filename_len, mode, mode_len);
            return ___ret;
        }

        public static int LuaL_loadfilex(IntPtr L, string filename, string mode)
        {
            var ___ret = __Internal.LuaL_loadfilex(L, filename, mode);
            return ___ret;
        }

        public static int LuaL_loadbufferx(IntPtr L, string buff, ulong sz, string name, string mode)
        {
            var ___ret = __Internal.LuaL_loadbufferx(L, buff, sz, name, mode);
            return ___ret;
        }

        public static int LuaL_loadstring(IntPtr L, string s)
        {
            var ___ret = __Internal.LuaL_loadstring(L, s);
            return ___ret;
        }

        public static IntPtr LuaL_newstate()
        {
            var ___ret = __Internal.LuaL_newstate();
            return ___ret;
        }

        public static long LuaL_len(IntPtr L, int idx)
        {
            var ___ret = __Internal.LuaL_len(L, idx);
            return ___ret;
        }

        public static void LuaL_addgsub(global::PlutoNET.LuaL_Buffer b, string s, string p, string r)
        {
            var __arg0 = b is null ? __IntPtr.Zero : b.__Instance;
            __Internal.LuaL_addgsub(__arg0, s, p, r);
        }

        public static string LuaL_gsub(IntPtr L, string s, string p, string r)
        {
            var ___ret = __Internal.LuaL_gsub(L, s, p, r);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        public static void LuaL_setfuncs(IntPtr L, global::PlutoNET.LuaL_Reg l, int nup)
        {
            var __arg1 = l is null ? __IntPtr.Zero : l.__Instance;
            __Internal.LuaL_setfuncs(L, __arg1, nup);
        }

        public static int LuaL_getsubtable(IntPtr L, int idx, string fname)
        {
            var ___ret = __Internal.LuaL_getsubtable(L, idx, fname);
            return ___ret;
        }

        public static void LuaL_traceback(IntPtr L, IntPtr L1, string msg, int level)
        {
            __Internal.LuaL_traceback(L, L1, msg, level);
        }

        public static void LuaL_requiref(IntPtr L, string modname, global::PlutoNET.LuaCFunction openf, int glb)
        {
            var __arg2 = openf == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(openf);
            __Internal.LuaL_requiref(L, modname, __arg2, glb);
        }

        public static void LuaL_buffinit(IntPtr L, global::PlutoNET.LuaL_Buffer B)
        {
            var __arg1 = B is null ? __IntPtr.Zero : B.__Instance;
            __Internal.LuaL_buffinit(L, __arg1);
        }

        public static sbyte* LuaL_prepbuffsize(global::PlutoNET.LuaL_Buffer B, ulong sz)
        {
            var __arg0 = B is null ? __IntPtr.Zero : B.__Instance;
            var ___ret = __Internal.LuaL_prepbuffsize(__arg0, sz);
            return ___ret;
        }

        public static void LuaL_addlstring(global::PlutoNET.LuaL_Buffer B, string s, ulong l)
        {
            var __arg0 = B is null ? __IntPtr.Zero : B.__Instance;
            __Internal.LuaL_addlstring(__arg0, s, l);
        }

        public static void LuaL_addstring(global::PlutoNET.LuaL_Buffer B, string s)
        {
            var __arg0 = B is null ? __IntPtr.Zero : B.__Instance;
            __Internal.LuaL_addstring(__arg0, s);
        }

        public static void LuaL_addvalue(global::PlutoNET.LuaL_Buffer B)
        {
            var __arg0 = B is null ? __IntPtr.Zero : B.__Instance;
            __Internal.LuaL_addvalue(__arg0);
        }

        public static void LuaL_pushresult(global::PlutoNET.LuaL_Buffer B)
        {
            var __arg0 = B is null ? __IntPtr.Zero : B.__Instance;
            __Internal.LuaL_pushresult(__arg0);
        }

        public static void LuaL_pushresultsize(global::PlutoNET.LuaL_Buffer B, ulong sz)
        {
            var __arg0 = B is null ? __IntPtr.Zero : B.__Instance;
            __Internal.LuaL_pushresultsize(__arg0, sz);
        }

        public static sbyte* LuaL_buffinitsize(IntPtr L, global::PlutoNET.LuaL_Buffer B, ulong sz)
        {
            var __arg1 = B is null ? __IntPtr.Zero : B.__Instance;
            var ___ret = __Internal.LuaL_buffinitsize(L, __arg1, sz);
            return ___ret;
        }
    }

    namespace Pluto
    {
        public unsafe partial class PreloadedLibrary : IDisposable
        {
            [StructLayout(LayoutKind.Sequential, Size = 24)]
            public partial struct __Internal
            {
                internal __IntPtr name;
                internal __IntPtr funcs;
                internal __IntPtr init;

                [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "??0PreloadedLibrary@Pluto@@QEAA@PEBDPEBUluaL_Reg@@P6AHPEAUlua_State@@@Z@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr ctor(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, __IntPtr funcs, __IntPtr init);

                [SuppressUnmanagedCodeSecurity, DllImport("lua54", EntryPoint = "??0PreloadedLibrary@Pluto@@QEAA@AEBU01@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
            }

            public __IntPtr __Instance { get; protected set; }

            internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::PlutoNET.Pluto.PreloadedLibrary>> NativeToManagedMap =
                new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::PlutoNET.Pluto.PreloadedLibrary>>();

            internal static void __RecordNativeToManagedMapping(IntPtr native, global::PlutoNET.Pluto.PreloadedLibrary managed)
            {
                NativeToManagedMap[native] = new global::System.WeakReference<global::PlutoNET.Pluto.PreloadedLibrary>(managed);
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::PlutoNET.Pluto.PreloadedLibrary managed)
            {
    
                managed = default;
                return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
            }

            private bool __name_OwnsNativeMemory = false;
            protected bool __ownsNativeInstance;

            internal static PreloadedLibrary __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new PreloadedLibrary(native.ToPointer(), skipVTables);
            }

            internal static PreloadedLibrary __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (PreloadedLibrary)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static PreloadedLibrary __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new PreloadedLibrary(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*) ret = native;
                return ret.ToPointer();
            }

            private PreloadedLibrary(__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected PreloadedLibrary(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new __IntPtr(native);
            }

            public PreloadedLibrary(string name, global::PlutoNET.LuaL_Reg funcs, global::PlutoNET.LuaCFunction init)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::PlutoNET.Pluto.PreloadedLibrary.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                var __arg1 = funcs is null ? __IntPtr.Zero : funcs.__Instance;
                var __arg2 = init == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(init);
                __Internal.ctor(__Instance, name, __arg1, __arg2);
            }

            public PreloadedLibrary(global::PlutoNET.Pluto.PreloadedLibrary _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::PlutoNET.Pluto.PreloadedLibrary.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                *((global::PlutoNET.Pluto.PreloadedLibrary.__Internal*) __Instance) = *((global::PlutoNET.Pluto.PreloadedLibrary.__Internal*) _0.__Instance);
                if (_0.__name_OwnsNativeMemory)
                    this.Name = _0.Name;
            }

            ~PreloadedLibrary()
            {
                Dispose(false, callNativeDtor : __ownsNativeInstance );
            }

            public void Dispose()
            {
                Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
                GC.SuppressFinalize(this);
            }

            partial void DisposePartial(bool disposing);

            internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
            {
                if (__Instance == IntPtr.Zero)
                    return;
                NativeToManagedMap.TryRemove(__Instance, out _);
                DisposePartial(disposing);
                if (__name_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->name);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public string Name
            {
                get
                {
                    return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->name);
                }

                set
                {
                    if (__name_OwnsNativeMemory)
                        Marshal.FreeHGlobal(((__Internal*)__Instance)->name);
                    __name_OwnsNativeMemory = true;
                    if (value == null)
                    {
                        ((__Internal*)__Instance)->name = global::System.IntPtr.Zero;
                        return;
                    }
                    var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                    var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                    Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                    Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                    ((__Internal*)__Instance)->name = (__IntPtr) __bytePtr0;
                }
            }

            public global::PlutoNET.LuaL_Reg Funcs
            {
                get
                {
                    var __result0 = global::PlutoNET.LuaL_Reg.__GetOrCreateInstance(((__Internal*)__Instance)->funcs, false);
                    return __result0;
                }
            }

            public global::PlutoNET.LuaCFunction Init
            {
                get
                {
                    var __ptr0 = ((__Internal*)__Instance)->init;
                    return __ptr0 == IntPtr.Zero? null : (global::PlutoNET.LuaCFunction) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PlutoNET.LuaCFunction));
                }
            }
        }
    }
}
namespace PlutoNET.__Symbols
{
    internal class lua54
    {
        public static IntPtr _preloaded_assert_Pluto__3UPreloadedLibrary_1_B { get; }
        public static IntPtr _preloaded_vector3_Pluto__3UPreloadedLibrary_1_B { get; }
        public static IntPtr _lua_ident__3QBDB { get; }
        static lua54()
        {
            var path = "lua54";
            var image = CppSharp.SymbolResolver.LoadImage(ref path);
            if (image == IntPtr.Zero) throw new global::System.DllNotFoundException(path);
            _preloaded_assert_Pluto__3UPreloadedLibrary_1_B = CppSharp.SymbolResolver.ResolveSymbol(image, "?preloaded_assert@Pluto@@3UPreloadedLibrary@1@B");
            _preloaded_vector3_Pluto__3UPreloadedLibrary_1_B = CppSharp.SymbolResolver.ResolveSymbol(image, "?preloaded_vector3@Pluto@@3UPreloadedLibrary@1@B");
            _lua_ident__3QBDB = CppSharp.SymbolResolver.ResolveSymbol(image, "?lua_ident@@3QBDB");
        }
    }
}

